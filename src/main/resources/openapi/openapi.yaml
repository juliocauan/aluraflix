openapi: 3.0.3

info:
  title: 'AluraFlix'
  version: '1.0.0'

tags:
  - name: "video"
  - name: "categoria"

paths:
  /videos:
    get:
      tags:
        - "video"
      operationId: "findAllVideos"
      description: "Get a list of all Videos"
      responses:
        '200':
          description: "Sucessfully found all Videos"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VideoGet"
    post:
      tags:
        - "video"
      operationId: "addVideo"
      description: "Post a new Video"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VideoPost"
      responses:
        '201':
          description: "Successfully created a new Video"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoGet"
        '400':
          $ref: "#/components/responses/BadRequest"
          
  /videos/{videoId}:
    get:
      tags:
        - "video"
      operationId: "findVideoById"
      description: "Get a specific Video by Id"
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/videoId"
      responses:
        '200':
          description: "Sucessfully found Video"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoGet"
        '404':
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - "video"
      operationId: "updateVideo"
      description: "Update Video parameters"
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/videoId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VideoPut"
      responses:
        '200':
          description: "Successfully updated Entity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoGet"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - "video"
      operationId: "deleteVideo"
      description: "Delete Video"
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/videoId"
      responses:
        '200':
          $ref: "#/components/responses/Deleted"
        '404':
          $ref: "#/components/responses/NotFound"
  
  /categorias:
    get:
      tags:
        - "categoria"
      operationId: "findAllCategorias"
      description: "Get a list of all Categorias"
      responses:
        '200':
          description: "Sucessfully found all Categorias"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoriaGet"
    post:
      tags:
        - "categoria"
      operationId: "addCategoria"
      description: "Post a new Categoria"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoriaPost"
      responses:
        '201':
          description: "Successfully created a new Categoria"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoriaGet"
        '400':
          $ref: "#/components/responses/BadRequest"

  /categorias/{categoriaId}:
    get:
      tags:
        - "categoria"
      operationId: "findCategoriaById"
      description: "Get a specific Categoria by Id"
      parameters:
        - name: categoriaId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/categoriaId"
      responses:
        '200':
          description: "Sucessfully found Categoria"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoriaGet"
        '404':
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - "categoria"
      operationId: "updateCategoria"
      description: "Update Categoria parameters"
      parameters:
        - name: categoriaId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/categoriaId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoriaPut"
      responses:
        '200':
          description: "Successfully updated Entity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoriaGet"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - "categoria"
      operationId: "deleteCategoria"
      description: "Delete Categoria"
      parameters:
        - name: categoriaId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/categoriaId"
      responses:
        '200':
          $ref: "#/components/responses/Deleted"
        '404':
          $ref: "#/components/responses/NotFound"

  /categorias/{categoriaId}/videos:
    get:
      tags:
        - "categoria"
      operationId: "findVideoListByCategoria"
      description: "Get list of Videos sorted by Categoria"
      parameters:
        - name: categoriaId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/categoriaId"
      responses:
        '200':
          description: "Sucessfully found list of Videos"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/VideoGet"
        '404':
          $ref: "#/components/responses/NotFound"

components:
  schemas:
    ErrorDto:
      type: object
      required:
        - code
        - message
        - trace
      properties:
        code:
          type: integer
        message:
          type: string
        trace:
          type: string
        fieldList:
          type: array
          items:
            $ref: "#/components/schemas/ErrorFieldDto"
    ErrorFieldDto:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        field:
          type: string
    
    VideoGet:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/videoId"
        categoriaId:
          $ref: "#/components/schemas/categoriaId"
        titulo:
          type: string
        descricao:
          type: string
        url:
          type: string
    VideoPost:
      type: object
      required:
        - categoriaId
        - titulo
        - descricao
        - url
      properties:
        categoriaId:
          $ref: "#/components/schemas/categoriaId"
        titulo:
          type: string
          minLength: 1
          maxLength: 100
        descricao:
          type: string
        url:
          type: string
          minLength: 10
          maxLength: 255
    VideoPut:
      type: object
      properties:
        categoriaId:
          $ref: "#/components/schemas/categoriaId"
        titulo:
          type: string
          minLength: 1
          maxLength: 100
        descricao:
          type: string
        url:
          type: string
          minLength: 10
          maxLength: 255
    
    CategoriaGet:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/categoriaId"
        titulo:
          type: string
        cor:
          $ref: "#/components/schemas/Cor"
    CategoriaPost:
      type: object
      required:
        - titulo
        - cor
      properties:
        titulo:
          type: string
          minLength: 2
          maxLength: 30
        cor:
          $ref: "#/components/schemas/Cor"
    CategoriaPut:
      type: object
      properties:
        titulo:
          type: string
          minLength: 2
          maxLength: 30
        cor:
          $ref: "#/components/schemas/Cor"
    
    Cor:
      type: string
      enum:
        - "White"
        - "Teal"
    videoId:
      $ref: "#/components/schemas/integerId"
    categoriaId:
      $ref: "#/components/schemas/integerId"
    integerId:
      type: integer
      format: int32
  
  responses:
    NotFound:
      description: "Could not find specific Entity"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorDto"
    BadRequest:
      description: "Could not created/update Entity"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorDto"
    Deleted:
      description: "Successfully deleted Entity"
