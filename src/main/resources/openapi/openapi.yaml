openapi: 3.0.3

info:
  title: 'AluraFlix'
  version: '1.0.0'

tags:
  - name: "video"
  - name: "category"

paths:

  /auth:
    post:
      operationId: 'authenticate'
      description: 'Validate User authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
      responses:
        '200':
          description: Successfully Authenticated
        '404':
          description: Invalid data

  /videos:
    get:
      tags:
        - "video"
      operationId: "findAllVideos"
      description: "Get a list of all Videos"
      x-spring-paginated: true
      parameters:
        - name: search
          in: query
          required: false
          allowEmptyValue: false
          description: "Search by name of Video"
          example: "jogos"
          explode: true
          style: form
          schema:
            type: string
      responses:
        '200':
          description: "Sucessfully found all Videos"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoPage"
    post:
      tags:
        - "video"
      operationId: "addVideo"
      description: "Post a new Video"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VideoPost"
      responses:
        '201':
          description: "Successfully created a new Video"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoGet"
        '400':
          $ref: "#/components/responses/BadRequest"
          
  /videos/{videoId}:
    get:
      tags:
        - "video"
      operationId: "findVideoById"
      description: "Get a specific Video by Id"
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/videoId"
      responses:
        '200':
          description: "Sucessfully found Video"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoGet"
        '404':
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - "video"
      operationId: "updateVideo"
      description: "Update Video parameters"
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/videoId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VideoPut"
      responses:
        '200':
          description: "Successfully updated Entity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoGet"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - "video"
      operationId: "deleteVideo"
      description: "Delete Video"
      parameters:
        - name: videoId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/videoId"
      responses:
        '200':
          $ref: "#/components/responses/Deleted"
        '404':
          $ref: "#/components/responses/NotFound"
  
  /categories:
    get:
      tags:
        - "category"
      operationId: "findAllCategories"
      description: "Get a list of all Categories"
      x-spring-paginated: true
      responses:
        '200':
          description: "Sucessfully found all Categories"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryPage"
    post:
      tags:
        - "category"
      operationId: "addCategory"
      description: "Post a new Category"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryPost"
      responses:
        '201':
          description: "Successfully created a new Category"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryGet"
        '400':
          $ref: "#/components/responses/BadRequest"

  /categories/{categoryId}:
    get:
      tags:
        - "category"
      operationId: "findCategoryById"
      description: "Get a specific Category by Id"
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/categoryId"
      responses:
        '200':
          description: "Sucessfully found Category"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryGet"
        '404':
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - "category"
      operationId: "updateCategory"
      description: "Update Category parameters"
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/categoryId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryPut"
      responses:
        '200':
          description: "Successfully updated Entity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryGet"
        '400':
          $ref: "#/components/responses/BadRequest"
        '404':
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - "category"
      operationId: "deleteCategory"
      description: "Delete Category"
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/categoryId"
      responses:
        '200':
          $ref: "#/components/responses/Deleted"
        '404':
          $ref: "#/components/responses/NotFound"

  /categories/{categoryId}/videos:
    get:
      tags:
        - "category"
      operationId: "findVideosByCategory"
      description: "Get list of Videos sorted by Category"
      x-spring-paginated: true
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/categoryId"
      responses:
        '200':
          description: "Sucessfully found list of Videos"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VideoPage"
        '404':
          $ref: "#/components/responses/NotFound"

components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
        - trace
      properties:
        code:
          type: integer
        message:
          type: string
        trace:
          type: string
        fieldList:
          type: array
          items:
            $ref: "#/components/schemas/ErrorField"
    ErrorField:
      type: object
      required:
        - code
        - message
        - field
      properties:
        code:
          type: string
        message:
          type: string
        field:
          type: string
    Page:
      type: object
      properties:
        page:
          type: integer
        numberOfElements:
          type: integer
        size:
          type: integer
        hasNext:
          type: boolean
        hasPrevious:
          type: boolean

    VideoPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/VideoGet"
        page:
          $ref: "#/components/schemas/Page"
    VideoGet:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/videoId"
        categoryId:
          $ref: "#/components/schemas/categoryId"
        title:
          type: string
        description:
          type: string
        url:
          type: string
    VideoPost:
      type: object
      required:
        - title
        - description
        - url
      properties:
        categoryId:
          $ref: "#/components/schemas/categoryId"
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
        url:
          type: string
          minLength: 10
          maxLength: 255
    VideoPut:
      type: object
      properties:
        categoryId:
          $ref: "#/components/schemas/categoryId"
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
        url:
          type: string
          minLength: 10
          maxLength: 255
    
    CategoryPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/CategoryGet"
        page:
          $ref: "#/components/schemas/Page"
    CategoryGet:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/categoryId"
        title:
          type: string
        color:
          $ref: "#/components/schemas/Color"
    CategoryPost:
      type: object
      required:
        - title
        - color
      properties:
        title:
          type: string
          minLength: 2
          maxLength: 30
        color:
          $ref: "#/components/schemas/Color"
    CategoryPut:
      type: object
      properties:
        title:
          type: string
          minLength: 2
          maxLength: 30
        color:
          $ref: "#/components/schemas/Color"

    LoginForm:
      type: object
      required:
        - email
        - pswd
      properties:
        email:
          type: string
          format: email
        pswd:
          type: string
          format: password
    Color:
      type: string
      enum:
        - "White"
        - "Teal"
    ProfileType:
      type: string
      enum:
        - "admin"
        - "client"
    videoId:
      $ref: "#/components/schemas/integerId"
    categoryId:
      $ref: "#/components/schemas/integerId"
    integerId:
      type: integer
      format: int32
  
  responses:
    NotFound:
      description: "Could not find specific Entity"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      description: "Could not create/update Entity"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Deleted:
      description: "Successfully deleted Entity"
